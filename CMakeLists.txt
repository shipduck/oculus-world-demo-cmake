CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( demo )

LIST( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" )
INCLUDE( compiler_option )

OPTION( AUTO_DOWNLOAD_EXT "When needed external library is not found, Automatically download it." OFF )
OPTION( SUBMODULE_UPDATE "Try to update submodules" ON )

SET( DEMO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )
SET( DEMO_EXT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ext )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin" )

ADD_DEFINITIONS( -DUNICODE -D_UNICODE )

IF( SUBMODULES_UPDATE )
	MESSAGE( "Git Submodule update..." )
	EXECUTE_PROCESS( COMMAND git submodule update --init
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.. )
	MESSAGE( "Git Submodule update complete" )
ENDIF(  )

IF( APPLE )
	SET( CMAKE_FIND_ROOT_PATH ${CMAKE_OSX_SYSROOT} )
ENDIF(  )

MACRO( APPEND_LINK_LIBS )
	LIST( APPEND DEMO_LINK_LIBS ${ARGN} )
ENDMACRO( APPEND_LINK_LIBS )

MACRO( APPEND_LINK_EXT_LIBS OPTIMIZED_LIB DEBUG_LIB )
	LIST( APPEND DEMO_LINK_EXT_LIBS optimized ${OPTIMIZED_LIB} debug ${DEBUG_LIB} )
ENDMACRO( APPEND_LINK_EXT_LIBS OPTIMIZED_LIB DEBUG_LIB )

# enable ovr assert
SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DOVR_BUILD_DEBUG" )

# enable win32+GL
#ADD_DEFINITIONS( -DOVR_WIN32_GL=1 )
ADD_DEFINITIONS( -DOVR_WIN32_GL=0 )

#########################################################

IF( APPLE )
	FIND_LIBRARY( OPENGL_LIB OpenGL )
	FIND_LIBRARY( COCOA_LIB Cocoa )
	FIND_LIBRARY( IOKIT_LIB IOKit )
	APPEND_LINK_LIBS( ${IOKIT_LIB} ${COCOA_LIB} )
ENDIF(  )

#########################################################
# Add LibOVR
ADD_SUBDIRECTORY( ${DEMO_EXT_DIR}/libovr )

INCLUDE_DIRECTORIES( ${LIBOVR_INC_DIR} )

APPEND_LINK_LIBS( LibOVR )

IF( WIN32 )
	INCLUDE( FindDirectX )
	IF( DirectX_FOUND )
		IF( DirectX_D3D11_FOUND )
			INCLUDE_DIRECTORIES( ${DirectX_INCLUDE_DIR} 
							${DirectX_D3D11_INCLUDE_DIR} )
			LIST( APPEND DEMO_LINK_LIBS 
				${DirectX_LIBRARIES} 
				${DirectX_D3D11_LIBRARY} )
			MESSAGE( "Use DirectX 11" )	
		ENDIF(  )
		
		IF( DirectX_D3D10_FOUND )
			INCLUDE_DIRECTORIES( ${DirectX_INCLUDE_DIR} 
							${DirectX_D3D10_INCLUDE_DIR} )
			LIST( APPEND DEMO_LINK_LIBS 
				${DirectX_LIBRARIES} 
				${DirectX_D3D10_LIBRARY} )
			MESSAGE( "Use DirectX 10" )	
		ENDIF(  )
			
		IF( NOT DirectX_D3D11_FOUND AND NOT DirectX_D3D10_FOUND )
			MESSAGE( WARNING "Can't find DirectX 10 or 11 SDK in your build system" )
		ENDIF(  )
	
	ELSE(  )
		MESSAGE( WARNING "Can't find DirectX SDK in your build system" )
	ENDIF(  )
ENDIF(  )

ADD_SUBDIRECTORY ( ext/glew )
INCLUDE_DIRECTORIES( ext/glew/include )

# subsystem = window
IF( WIN32 )
	LIST( APPEND DEMO_OPTION WIN32 )
ENDIF(  )
#########################################################

# Set Include Path
INCLUDE_DIRECTORIES( ${DEMO_SRC_DIR} )

IF( MSVC )
	APPEND_LINK_LIBS( Setupapi winmm )
ENDIF()

APPEND_LINK_LIBS( libglew_shared )

IF( WIN32 )
	SET( GL_LIBRARY opengl32 )
ELSEIF( APPLE )
	FIND_LIBRARY( GL_LIBRARY OpenGL )
ELSE(  )
	SET( GL_LIBRARY GL )
ENDIF(  )

APPEND_LINK_LIBS( ${GL_LIBRARY} )

# File List
FILE( GLOB DEMO_SRC_FILES
	"${DEMO_SRC_DIR}/*.*" )
FILE( GLOB DEMO_TINYXML_FILES 
	"${DEMO_SRC_DIR}/TinyXml/*.*" )
	
FILE( GLOB DEMO_OCULUS_SDK_FILES 
	"${DEMO_SRC_DIR}/Platform/Platform.*"
	"${DEMO_SRC_DIR}/Platform/Platform_Default.*"
	"${DEMO_SRC_DIR}/Render/Render_Device.*"
	"${DEMO_SRC_DIR}/Render/Render_LoadTextureDDS.*"
	"${DEMO_SRC_DIR}/Render/Render_LoadTextureTGA.*"
	"${DEMO_SRC_DIR}/Render/Render_XmlSceneLoader.*" )
	
IF(MSVC)
	FILE( GLOB DEMO_OCULUS_SDK_PLATFORM_FILES 
		"${DEMO_SRC_DIR}/Platform/Win32_*.*"
		"${DEMO_SRC_DIR}/Render/Render_GL_Device.*"
		"${DEMO_SRC_DIR}/Render/Render_GL_Win32_Device.*"
		"${DEMO_SRC_DIR}/Render/Render_D3D11_Device.*"
		"${DEMO_SRC_DIR}/Render/Render_D3D10_Device.*"		)
ELSEIF( APPLE )
	FILE( GLOB DEMO_OCULUS_SDK_PLATFORM_FILES 
		"${DEMO_SRC_DIR}/Platform/OSX_*.*"
		"${DEMO_SRC_DIR}/Render/Render_GL_Device.*" )
ELSE(  ) 
	FILE( GLOB DEMO_OCULUS_SDK_PLATFORM_FILES 
		"${DEMO_SRC_DIR}/Platform/Linux_*.*"
		"${DEMO_SRC_DIR}/Render/Render_GL_Device.*" )
ENDIF(  )
	
ADD_EXECUTABLE( demo 
	${DEMO_OPTION}
	${DEMO_SRC_FILES} 	
	${DEMO_TINYXML_FILES} 
	${DEMO_CVARS_SRC_FILES} 	
	${DEMO_OCULUS_SDK_FILES}
	${DEMO_OCULUS_SDK_PLATFORM_FILES} )

SOURCE_GROUP( "" FILES ${DEMO_SRC_FILES} )
SOURCE_GROUP( oculus FILES ${DEMO_OCULUS_SDK_FILES} ${DEMO_OCULUS_SDK_PLATFORM_FILES} )
SOURCE_GROUP( tinyxml FILES ${DEMO_TINYXML_FILES} )

TARGET_LINK_LIBRARIES( demo
	${DEMO_LINK_LIBS}
	${DEMO_LINK_EXT_LIBS} )

USE_CPP11( TARGET demo LibOVR )

IF( APPLE )
	# For debug... OSX App bundle find file from app bundle existance path
	SET_TARGET_PROPERTIES( demo PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR} )
ENDIF(  )
